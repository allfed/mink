NOTE: this is the difference between the main.c and the old_main.c.XXX file, indicating ricky's changes to the code.


################################

37c37
<     int cf_Z;
---
>     int cf;
39,41c39,41
<     CELL *cell_Z;
<     FCELL *fcell_Z;
<     DCELL *dcell_Z;
---
>     CELL *cell;
>     FCELL *fcell;
>     DCELL *dcell;
52,53c52
< //    struct Option *input, *output, *type, *title, *mult;
<       struct Option *data_input, *header_input, *geog_input, *output, *type, *title;
---
>   struct Option *input, *output, *type, *title, *mult;
56,111d54
< // various things added by ricky
< 
<     int chars_to_read=9999;
< 
<     FILE *fd_header, *fd_geog, *fd_geog_info, *fd_data_info, *fd_data;
<     char *data_input_char, *geog_input_char, *header_input_char;
<     char file_to_open[chars_to_read + 1];
< 
<     int data_row,data_col;
<     int row_to_restore, col_to_restore;
< 
<     int MAGIC_ROW_INDEX = 0; // in the geographic info file
<     int MAGIC_COL_INDEX = 1; // in the geographic info file
< 
<     char data_delimiter = '\t';
<     char geog_delimiter = '\t';
<     int nmaps = -1;
<     int n_to_restore = -1;
<     char junk_line[chars_to_read + 1];
<     char junk[chars_to_read + 1];
< 
<     int data_is_white_delimited = 0;
<     int data_is_comma_delimited = 0;
< 
<     int geog_is_white_delimited = 0;
<     int geog_is_comma_delimited = 0;
< 
<     char partial_value[chars_to_read + 1];
<     char current_char = '\0';
< 
<     char data_format_string[25];
<     char geog_format_string[25];
< 
<     int map_index;
< 
<     int MAX_NUMBER_OF_MAPS = 1500;
< //    int MAX_NUMBER_OF_MAPS = 450;
< 
<     int cf[MAX_NUMBER_OF_MAPS];
<     CELL *cell[MAX_NUMBER_OF_MAPS];
<     FCELL *fcell[MAX_NUMBER_OF_MAPS];
<     DCELL *dcell[MAX_NUMBER_OF_MAPS];
< 
<     char output_names[MAX_NUMBER_OF_MAPS][500];
< 
<       int n_found = 0;
<       int storage_char = 0;
< 
<     int row_currently_restoring, col_currently_restoring;
< 
<     int read_value_success = -1;
< 
<     
< 
< // end various things added by ricky
< 
118c61,62
<       _("Does the opposite of r.out.new .");
---
>   _("Converts an ESRI ARC/INFO ascii raster file (GRID) "
>     "into a (binary) raster map layer.");
120,141c64,70
<     parm.data_input = G_define_option();
<     parm.data_input->key = "data_input";
<     parm.data_input->type = TYPE_STRING;
<     parm.data_input->required = YES;
<     parm.data_input->description =
<       _("name of file containing the data (tab delimited) (no.txt)");
< //    parm.data_input->gisprompt = "old_file,file,input";
< 
<     parm.geog_input = G_define_option();
<     parm.geog_input->key = "geog_input";
<     parm.geog_input->type = TYPE_STRING;
<     parm.geog_input->required = YES;
<     parm.geog_input->description =
<       _("name of file containing the row/col/north/east information (no .txt)");
< //    parm.location_input->gisprompt = "old_file,file,input";
< 
<     parm.header_input = G_define_option();
<     parm.header_input->key = "header_input";
<     parm.header_input->type = TYPE_STRING;
<     parm.header_input->required = YES;
<     parm.header_input->description =
<       _("name of file containing the ARC ASCII style header information (no .txt)");
---
>     parm.input = G_define_option();
>     parm.input->key = "input";
>     parm.input->type = TYPE_STRING;
>     parm.input->required = YES;
>     parm.input->description =
>   _("ARC/INFO ASCII raster file (GRID) to be imported");
>     parm.input->gisprompt = "old_file,file,input";
159a89,94
>     parm.mult = G_define_option();
>     parm.mult->key = "mult";
>     parm.mult->type = TYPE_DOUBLE;
>     parm.mult->answer = "1.0";
>     parm.mult->required = NO;
>     parm.mult->description = _("Multiplier for ASCII data");
162,167c97,98
<       exit(EXIT_FAILURE);
< //    char *data_input_char, *location_input_char
<     data_input_char = parm.data_input->answer;
<     geog_input_char = parm.geog_input->answer;
<     header_input_char = parm.header_input->answer;
< 
---
>   exit(EXIT_FAILURE);
>     input = parm.input->answer;
170c101
<       G_strip(title);
---
>   G_strip(title);
172c103
< //    sscanf(parm.mult->answer, "%lf", &mult_fact);
---
>     sscanf(parm.mult->answer, "%lf", &mult_fact);
174c105
<       rtype = CELL_TYPE;
---
>   rtype = CELL_TYPE;
176c107
<       rtype = DCELL_TYPE;
---
>   rtype = DCELL_TYPE;
178,184c109
<       rtype = FCELL_TYPE;
< 
< 
<     /* deal with the header file */
< 
<     sprintf(file_to_open,"%s.txt",header_input_char);
<     fd_header = fopen(file_to_open, "r");
---
>   rtype = FCELL_TYPE;
186,187c111,121
<     if (fd_header == NULL)
<       G_fatal_error(_("Unable to open input file <%s>"),file_to_open);
---
>     if (strcmp("-", input) == 0) {
>   Tmp_file = G_tempfile();
>   if (NULL == (Tmp_fd = fopen(Tmp_file, "w+")))
>       G_fatal_error(_("Unable to open temporary file <%s>"), Tmp_file);
>   unlink(Tmp_file);
>   if (0 > file_cpy(stdin, Tmp_fd))
>       exit(EXIT_FAILURE);
>   fd = Tmp_fd;
>     }
>     else
>   fd = fopen(input, "r");
189,190c123,124
<     if (!gethead(fd_header, &cellhd, &missingval))
<       G_fatal_error(_("Can't get cell header"));
---
>     if (fd == NULL)
>   G_fatal_error(_("Unable to open input file <%s>"), input);
192c126,127
< //printf("\ndata = [%s]; geog = [%s]; header = [%s]\n",data_input_char,geog_input_char,header_input_char); fflush(stdout);
---
>     if (!gethead(fd, &cellhd, &missingval))
>   G_fatal_error(_("Can't get cell header"));
197c132
<       G_fatal_error(_("Can't set window"));
---
>   G_fatal_error(_("Can't set window"));
200,201c135,136
<       G_fatal_error(_("OOPS: rows changed from %d to %d"), nrows,
<         G_window_rows());
---
>   G_fatal_error(_("OOPS: rows changed from %d to %d"), nrows,
>             G_window_rows());
203,204c138,139
<       G_fatal_error(_("OOPS: cols changed from %d to %d"), ncols,
<         G_window_cols());
---
>   G_fatal_error(_("OOPS: cols changed from %d to %d"), ncols,
>             G_window_cols());
206,227c141,198
<     fclose(fd_header);
< 
<     /* figure out how many maps to create
<        and how many values to restore */
<     sprintf(file_to_open,"%s.info.txt",data_input_char);
<     fd_data_info = fopen(file_to_open, "r");
< 
<     if (fd_data_info == NULL)
<       G_fatal_error(_("Unable to open input file <%s>"), file_to_open);
< 
<     *junk = '\0'; // clear out the junk holders
<     *junk_line= '\0';
< 
<     // grab the first line
<     fgets(junk_line, chars_to_read, fd_data_info);
<     sscanf(junk_line, "%d%s", &n_to_restore, junk);
< 
<     // grab the second line
<     fgets(junk_line, chars_to_read, fd_data_info);
<     sscanf(junk_line, "%d%s", &nmaps, junk);
<     if ( nmaps > MAX_NUMBER_OF_MAPS ) {
<       G_fatal_error(_("number of maps [%d] > magic MAX number of maps [%d]"), nmaps, MAX_NUMBER_OF_MAPS);
---
>     switch (rtype) {
>     case CELL_TYPE:
>   cell = G_allocate_c_raster_buf();
>   break;
>     case FCELL_TYPE:
>   fcell = G_allocate_f_raster_buf();
>   break;
>     case DCELL_TYPE:
>   dcell = G_allocate_d_raster_buf();
>   break;
>     }
>     cf = G_open_raster_new(output, rtype);
>     if (cf < 0)
>   G_fatal_error(_("Unable to create raster map <%s>"), output);
> 
>     for (row = 0; row < nrows; row++) {
>   G_percent(row, nrows, 5);
>   for (col = 0; col < ncols; col++) {
>       if (fscanf(fd, "%lf", &x) != 1) {
>       G_unopen_cell(cf);
>       G_fatal_error(_("Data conversion failed at row %d, col %d"),
>                 row + 1, col + 1);
>       }
>       switch (rtype) {
>       case CELL_TYPE:
>       if ((int)x == missingval)
>           G_set_c_null_value(cell + col, 1);
>       else
>           cell[col] = (CELL) x *mult_fact;
> 
>       break;
>       case FCELL_TYPE:
>       if ((int)x == missingval)
>           G_set_f_null_value(fcell + col, 1);
>       else
>           fcell[col] = (FCELL) x *mult_fact;
> 
>       break;
>       case DCELL_TYPE:
>       if ((int)x == missingval)
>           G_set_d_null_value(dcell + col, 1);
>       else
>           dcell[col] = (DCELL) x *mult_fact;
> 
>       break;
>       }
>   }
>   switch (rtype) {
>   case CELL_TYPE:
>       G_put_c_raster_row(cf, cell);
>       break;
>   case FCELL_TYPE:
>       G_put_f_raster_row(cf, fcell);
>       break;
>   case DCELL_TYPE:
>       G_put_d_raster_row(cf, dcell);
>       break;
>   }
228a200,206
>     /* G_message(_("CREATING SUPPORT FILES FOR %s"), output); */
>     G_close_cell(cf);
>     if (title)
>   G_put_cell_title(output, title);
>     G_short_history(output, "raster", &history);
>     G_command_history(&history);
>     G_write_history(output, &history);
230,447d207
<     fgets(junk_line, chars_to_read, fd_data_info); // third line (total elements)
<     fgets(junk_line, chars_to_read, fd_data_info); // fourth line (MFM format)
<     fgets(junk_line, chars_to_read, fd_data_info); // fifth line (delimiter character)
< 
<     fclose(fd_data_info);
< 
<     data_delimiter = junk_line[0];
< 
< // ^^^^
< //        read_value_success = fscanf(fd_data, "%lf%*[,]", &x);
<     sprintf(data_format_string, "%%lf%%*[%c]",data_delimiter,data_delimiter);
< //printf("DFS = {%s}\n",data_format_string); fflush(stdout);
< 
< //printf("last   try: nmaps = [%d]; n_to_restore = [%d]; delimiter = [%c]\n",nmaps,n_to_restore,data_delimiter); fflush(stdout);
< 
<   // initialize the buffers...
<     for (map_index = 0; map_index < nmaps ; map_index++) {
<       switch (rtype) {
<       case CELL_TYPE:
<         cell[map_index] = G_allocate_c_raster_buf();
<         G_set_c_null_value( cell[map_index], ncols); // start out with all nulls
<         break;
<       case FCELL_TYPE:
<         fcell[map_index] = G_allocate_f_raster_buf();
<         G_set_f_null_value(fcell[map_index], ncols); // start out with all nulls
<         break;
<       case DCELL_TYPE:
<         dcell[map_index] = G_allocate_d_raster_buf();
<         G_set_d_null_value(dcell[map_index], ncols); // start out with all nulls
<         break;
<       }
< 
<       sprintf(output_names[map_index],"%s_%d",output,map_index);
<       //printf("output_names[map_index] = [%s]\n",output_names[map_index]);
< 
<       cf[map_index] = G_open_raster_new(output_names[map_index], rtype);
<       if (cf[map_index] < 0)
<         G_fatal_error(_("Unable to create raster map <%s>"), output_names[map_index]);
<     } // end for map_index
< 
< 
<     /* open up the data and geography files  */
<     sprintf(file_to_open,"%s.txt",data_input_char);
<     fd_data = fopen(file_to_open, "r");
< 
<     if (fd_data == NULL)
<       G_fatal_error(_("Unable to open input file <%s>"),file_to_open);
< 
<     sprintf(file_to_open,"%s.txt",geog_input_char);
<     fd_geog = fopen(file_to_open, "r");
< 
<     if (fd_geog == NULL)
<       G_fatal_error(_("Unable to open input file <%s>"),file_to_open);
< 
<     sprintf(file_to_open,"%s.info.txt",geog_input_char);
<     fd_geog_info = fopen(file_to_open, "r");
< 
<     if (fd_geog_info == NULL)
<       G_fatal_error(_("Unable to open input file <%s>"),file_to_open);
< 
<     // pull out the delimiter for the geography file
<     // grab the first line
<     fgets(junk_line, chars_to_read, fd_geog_info);
<     fgets(junk_line, chars_to_read, fd_geog_info); // grab the second line
<     fgets(junk_line, chars_to_read, fd_geog_info); // third line (total elements)
<     fgets(junk_line, chars_to_read, fd_geog_info); // fourth line (MFM format)
<     fgets(junk_line, chars_to_read, fd_geog_info); // fifth line (delimiter character)
< 
<     fclose(fd_geog_info);
< 
<     geog_delimiter = junk_line[0];
< 
<     sprintf(geog_format_string, "%%d%%*[%c]%%d%%*[%c]%%s",geog_delimiter,geog_delimiter);
< //printf("GFS = {%s}\n",geog_format_string); fflush(stdout);
< 
< /////////////////////////////// curlys match through here... that is, the only open one is for the main...
< //
<     // initialize...
<     row_currently_restoring = 0;
<     col_currently_restoring = 0;
< 
< /////////////// this curly does not have a correct match...
<     for (data_row = 0; data_row < n_to_restore; data_row++) {
<       G_percent(data_row, n_to_restore, 3);
<       /* pull out the geographic row/col to restore, skip over the lat/long */
< 
<       *junk = '\0'; // clear out the junk holders
<       *junk_line= '\0';
< 
<       // pull out the geographic row and column
<       // grab the first line
< 
<       fgets(junk_line, chars_to_read, fd_geog);
< 
<         sscanf(junk_line, geog_format_string, &row_to_restore, &col_to_restore, junk);
< //printf("\nat A\n"); fflush(stdout);
< /*
< printf("A: white_flag = %d ; row = [%d], col = [%d], junk = [%s], delimiter = [%c]\n",geog_is_white_delimited,row_to_restore, col_to_restore, junk, geog_delimiter);
< 
<         sscanf(junk_line, "%d%*[,]%d%*[,]%s", &row_to_restore, &col_to_restore, junk);
< printf("B: white_flag = %d ; row = [%d], col = [%d], junk = [%s], delimiter = [%c]\n",geog_is_white_delimited,row_to_restore, col_to_restore, junk, geog_delimiter);
< */
< 
<       /* check if we're all good or not */
< //printf("A: row = [%d], col = [%d], rcr = [%d]\n",row_to_restore, col_to_restore, row_currently_restoring);
<       while ( row_to_restore > row_currently_restoring )
<       {
<         // we need to null out the rest of this row, store it, and move on...
< //printf("[    need new row: (in while)..... rtr = %d >  rcr = %d ; nrows = %d ...    ]\n",row_to_restore,row_currently_restoring,nrows); fflush(stdout);
<         for (map_index = 0; map_index < nmaps ; map_index++) {
<           switch (rtype) {
<             case CELL_TYPE:
<                 G_put_c_raster_row(cf[map_index], cell[map_index]);
<                 G_set_c_null_value( cell[map_index], ncols); // start out with all nulls
<             break;
<             case FCELL_TYPE:
< //printf("\nat fcell\n"); fflush(stdout);
< //printf("\nat %d / %d / %d\n",row_currently_restoring,map_index,nmaps); fflush(stdout);
<                 G_put_f_raster_row(cf[map_index], fcell[map_index]);
<                 G_set_f_null_value(fcell[map_index], ncols); // start out with all nulls
<             break;
<             case DCELL_TYPE:
<                 G_put_d_raster_row(cf[map_index], dcell[map_index]);
<                 G_set_d_null_value(dcell[map_index], ncols); // start out with all nulls
<             break;
<           } // end of switch 
<         } // end for map_index for clearing out...
<           row_currently_restoring++;
<       } // end while ( row_to_restore > row_currently_restoring )
< //printf("\nat B\n"); fflush(stdout);
< 
< //printf("[    read actual values      ..... rtr = %d == rcr = %d ; nrows = %d ...    ]\n",row_to_restore,row_currently_restoring,nrows); fflush(stdout);
<       for (map_index = 0; map_index < nmaps ; map_index++) {
< 
<         /* pull out the data a bit at a time */
<         read_value_success = fscanf(fd_data, data_format_string, &x);
< 
<         if (read_value_success != 1) {
<           G_unopen_cell(cf[map_index]);
<           G_fatal_error(_("Data conversion failed at data row %d, map %d"),
<             data_row + 1, map_index + 1);
<         }
< 
< //printf("rtr=[%d]; ctr=[%d]; map=[%d]; num=[%g]\n",row_to_restore, col_to_restore,map_index,x); fflush(stdout);
< //printf("value = [%f], row = [%d], col = [%d], map = [%d]\n", x, row_to_restore, col_to_restore,map_index); fflush(stdout);
< 
<         switch (rtype) {
<         case CELL_TYPE:
<           cell[map_index][col_to_restore] = (CELL) x;
<           break;
<         case FCELL_TYPE:
<           fcell[map_index][col_to_restore] = (FCELL) x;
<           break;
<         case DCELL_TYPE:
<           dcell[map_index][col_to_restore] = (DCELL) x;
<           break;
<         } // end of switch 1
<       } // end of map_index
< //printf("\nat C\n"); fflush(stdout);
< //printf("[    done putting values in buff.. rtr = %d == rcr = %d ; nrows = %d ...    ]\n",row_to_restore,row_currently_restoring,nrows); fflush(stdout);
<     } // end of data_rows
< 
< //printf("[    finished with data        ... rtr = %d == rcr = %d ; nrows = %d ...    ]\n",row_to_restore,row_currently_restoring,nrows); fflush(stdout);
<     // store the last bit and close out
<     for (map_index = 0; map_index < nmaps ; map_index++) {
<       switch (rtype) {
<       case CELL_TYPE:
<           G_put_c_raster_row(cf[map_index], cell[map_index]);
<           break;
<       case FCELL_TYPE:
<           G_put_f_raster_row(cf[map_index], fcell[map_index]);
<           break;
<       case DCELL_TYPE:
<           G_put_d_raster_row(cf[map_index], dcell[map_index]);
<           break;
<       } // end of switch 2
<     } // end for map_index (close out)
< //printf("[    closed out last row... rcr = %d ; nrows = %d ...    ]\n",row_currently_restoring,nrows); fflush(stdout);
<       row_currently_restoring++;
< 
<     // make sure we've filled out the region...
< //printf("[ AFTER     out last row... rcr = %d ; nrows = %d ...    ]\n",row_currently_restoring,nrows); fflush(stdout);
<     while ( row_currently_restoring <= nrows )
<     {
< //printf("[    trying to finishing out row %d of %d...    ]\n",row_currently_restoring,nrows); fflush(stdout);
< // swapping the order of the put/set. i think i had it wrong originally due to copy/paste and no-lookee
< // it should be set to null THEN put away...
<       // we need to null out the rest of this row, store it, and move on...
<       for (map_index = 0; map_index < nmaps ; map_index++) {
<       switch (rtype) {
<         case CELL_TYPE:
<           G_set_c_null_value( cell[map_index], ncols); // start out with all nulls
<           G_put_c_raster_row(cf[map_index], cell[map_index]);
<           break;
<         case FCELL_TYPE:
<           G_set_f_null_value(fcell[map_index], ncols); // start out with all nulls
<           G_put_f_raster_row(cf[map_index], fcell[map_index]);
<           break;
<         case DCELL_TYPE:
<           G_set_d_null_value(dcell[map_index], ncols); // start out with all nulls
<           G_put_d_raster_row(cf[map_index], dcell[map_index]);
<           break;
<         } // end of switch 
<       } // end for map_index for clearing out...
<       row_currently_restoring++;
<     } // end if row_to_restore > row_currently_restoring
< 
<     for (map_index = 0; map_index < nmaps ; map_index++) {
<       /* G_message(_("CREATING SUPPORT FILES FOR %s"), output); */
<       G_close_cell(cf[map_index]);
< 
<       if (title)
<         G_put_cell_title(output_names[map_index], title);
< 
<       G_short_history(output_names[map_index], "raster", &history);
<       G_command_history(&history);
<       G_write_history(output_names[map_index], &history);
<     } // end for map_index (close out)
452,475c212,231
< /*
<     if (data_delimiter == '\t' || data_delimiter == ' ') {
<       data_is_white_delimited = 1;
<     } else if (data_delimiter == ',') {
<       data_is_comma_delimited = 1;
<     } else {
<       G_fatal_error(_("data delimiter must be whitespace or comma; actual = [%c]"),data_delimiter);
<     }
< */
< /*
<       if (data_is_white_delimited == 1) {
<         read_value_success = fscanf(fd_data, "%lf", &x);
<       } else {
< //        sscanf(junk_line, "%d%*[,]%d%*[,]%s", &row_to_restore, &col_to_restore, junk);
<         read_value_success = fscanf(fd_data, "%lf%*[,]", &x);
<       }
< */
< /*
<     if (geog_delimiter == '\t' || geog_delimiter == ' ') {
<       geog_is_white_delimited = 1;
<     } else if (geog_delimiter == ',') {
<       geog_is_comma_delimited = 1;
<     } else {
<       G_fatal_error(_("geog delimiter must be whitespace or comma; actual = [%c]"),geog_delimiter);
---
> int file_cpy(FILE * from, FILE * to)
> {
>     char buf[BUFSIZ];
>     long size;
>     int written = 0;
> 
>     while (1) {
>   size = fread(buf, 1, BUFSIZ, from);
>   if (!size) {
>       if (written) {
>       fflush(to);
>       fseek(to, 0l, 0);
>       }
>       return (0);
>   }
>   if (!fwrite(buf, 1, size, to)) {
>       G_warning(_("Failed to copy file"));
>       return (-1);
>   }
>   written = 1;
477,478c233,234
< */
< //        if (fscanf(fd_data, "%lf", &x) != 1) {}
---
>     /* NOTREACHED */
> }
