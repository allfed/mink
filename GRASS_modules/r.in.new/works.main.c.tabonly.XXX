
/****************************************************************************
 *
 * MODULE:       r.in.arc
 * AUTHOR(S):    Unknown German author,
 *                updated by Bill Brown to floating point support (original contributors)
 *               Markus Neteler <neteler itc.it>, Huidae Cho <grass4u gmail.com>,
 *               Roberto Flor <flor itc.it>, Jachym Cepicky <jachym les-ejk.cz>,
 *               Jan-Oliver Wagner <jan intevation.de>
 * PURPOSE:      Import an ESRI ARC/INFO ascii raster file
 * COPYRIGHT:    (C) 1999-2006 by the GRASS Development Team
 *
 *               This program is free software under the GNU General Public
 *               License (>=v2). Read the file COPYING that comes with GRASS
 *               for details.
 *
 *****************************************************************************/
#include <stdlib.h>
#include <string.h>
#include <grass/config.h>
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#include <grass/gis.h>
#include <grass/glocale.h>
#include "local_proto.h"

FILE *Tmp_fd = NULL;
char *Tmp_file = NULL;

int main(int argc, char *argv[])
{
    char *input;
    char *output;
    char *title;
    FILE *fd;
    int cf_Z;
    struct Cell_head cellhd;
    CELL *cell_Z;
    FCELL *fcell_Z;
    DCELL *dcell_Z;
    int row, col;
    int nrows, ncols;
    static int missingval;
    int rtype;
    double mult_fact;
    double x;
    struct GModule *module;
    struct History history;
    struct
    {
//	struct Option *input, *output, *type, *title, *mult;
      struct Option *data_input, *header_input, *geog_input, *output, *type, *title;
    } parm;

// various things added by ricky

    FILE *fd_header, *fd_geog, *fd_data_info, *fd_data;
    char *data_input_char, *geog_input_char, *header_input_char;
    char file_to_open[500];

    int data_row,data_col;
    int row_to_restore, col_to_restore;

    int MAGIC_ROW_INDEX = 0; // in the geographic info file
    int MAGIC_COL_INDEX = 1; // in the geographic info file

    int nmaps = -1;
    int n_to_restore = -1;
    char junk_line[500];
    char junk[500];
    int chars_to_read=499;
    int map_index;

    int MAX_NUMBER_OF_MAPS = 50;

    int cf[MAX_NUMBER_OF_MAPS];
    CELL *cell[MAX_NUMBER_OF_MAPS];
    FCELL *fcell[MAX_NUMBER_OF_MAPS];
    DCELL *dcell[MAX_NUMBER_OF_MAPS];

    char output_names[MAX_NUMBER_OF_MAPS][500];

    int row_currently_restoring, col_currently_restoring;

    

// end various things added by ricky


    G_gisinit(argv[0]);

    module = G_define_module();
    module->keywords = _("raster");
    module->description =
      _("Does the opposite of r.out.new .");

    parm.data_input = G_define_option();
    parm.data_input->key = "data_input";
    parm.data_input->type = TYPE_STRING;
    parm.data_input->required = YES;
    parm.data_input->description =
      _("name of file containing the data (tab delimited) (no.txt)");
//    parm.data_input->gisprompt = "old_file,file,input";

    parm.geog_input = G_define_option();
    parm.geog_input->key = "geog_input";
    parm.geog_input->type = TYPE_STRING;
    parm.geog_input->required = YES;
    parm.geog_input->description =
      _("name of file containing the row/col/north/east information (no .txt)");
//    parm.location_input->gisprompt = "old_file,file,input";

    parm.header_input = G_define_option();
    parm.header_input->key = "header_input";
    parm.header_input->type = TYPE_STRING;
    parm.header_input->required = YES;
    parm.header_input->description =
      _("name of file containing the ARC ASCII style header information (no .txt)");

    parm.output = G_define_standard_option(G_OPT_R_OUTPUT);

    parm.type = G_define_option();
    parm.type->key = "type";
    parm.type->type = TYPE_STRING;
    parm.type->required = NO;
    parm.type->options = "CELL,FCELL,DCELL";
    parm.type->answer = "FCELL";
    parm.type->description = _("Storage type for resultant raster map");

    parm.title = G_define_option();
    parm.title->key = "title";
    parm.title->key_desc = "\"phrase\"";
    parm.title->type = TYPE_STRING;
    parm.title->required = NO;
    parm.title->description = _("Title for resultant raster map");


    if (G_parser(argc, argv))
      exit(EXIT_FAILURE);
//    char *data_input_char, *location_input_char
    data_input_char = parm.data_input->answer;
    geog_input_char = parm.geog_input->answer;
    header_input_char = parm.header_input->answer;

    output = parm.output->answer;
    if (title = parm.title->answer)
      G_strip(title);

//    sscanf(parm.mult->answer, "%lf", &mult_fact);
    if (strcmp("CELL", parm.type->answer) == 0)
      rtype = CELL_TYPE;
    else if (strcmp("DCELL", parm.type->answer) == 0)
      rtype = DCELL_TYPE;
    else
      rtype = FCELL_TYPE;


    /* deal with the header file */

    sprintf(file_to_open,"%s.txt",header_input_char);
    fd_header = fopen(file_to_open, "r");

    if (fd_header == NULL)
      G_fatal_error(_("Unable to open input file <%s>"),file_to_open);

    if (!gethead(fd_header, &cellhd, &missingval))
      G_fatal_error(_("Can't get cell header"));

//printf("\ndata = [%s]; geog = [%s]; header = [%s]\n",data_input_char,geog_input_char,header_input_char); fflush(stdout);

    nrows = cellhd.rows;
    ncols = cellhd.cols;
    if (G_set_window(&cellhd) < 0)
      G_fatal_error(_("Can't set window"));

    if (nrows != G_window_rows())
      G_fatal_error(_("OOPS: rows changed from %d to %d"), nrows,
        G_window_rows());
    if (ncols != G_window_cols())
      G_fatal_error(_("OOPS: cols changed from %d to %d"), ncols,
        G_window_cols());

    fclose(fd_header);

    /* figure out how many maps to create
       and how many values to restore */
    sprintf(file_to_open,"%s.info.txt",data_input_char);
    fd_data_info = fopen(file_to_open, "r");

    if (fd_data_info == NULL)
      G_fatal_error(_("Unable to open input file <%s>"), file_to_open);

    *junk = '\0'; // clear out the junk holders
    *junk_line= '\0';

    // grab the first line
    fgets(junk_line, chars_to_read, fd_data_info);
    sscanf(junk_line, "%d%s", &n_to_restore, junk);

    // grab the second line
    fgets(junk_line, chars_to_read, fd_data_info);
    sscanf(junk_line, "%d%s", &nmaps, junk);

//printf("last   try: nmaps = [%d]; n_to_restore = [%d]\n",nmaps,n_to_restore); fflush(stdout);
    fclose(fd_data_info);

  // initialize the buffers...
    for (map_index = 0; map_index < nmaps ; map_index++) {
      switch (rtype) {
      case CELL_TYPE:
        cell[map_index] = G_allocate_c_raster_buf();
        G_set_c_null_value( cell[map_index], ncols); // start out with all nulls
        break;
      case FCELL_TYPE:
        fcell[map_index] = G_allocate_f_raster_buf();
        G_set_f_null_value(fcell[map_index], ncols); // start out with all nulls
        break;
      case DCELL_TYPE:
        dcell[map_index] = G_allocate_d_raster_buf();
        G_set_d_null_value(dcell[map_index], ncols); // start out with all nulls
        break;
      }

      sprintf(output_names[map_index],"%s_%d",output,map_index);
      //printf("output_names[map_index] = [%s]\n",output_names[map_index]);

      cf[map_index] = G_open_raster_new(output_names[map_index], rtype);
      if (cf[map_index] < 0)
        G_fatal_error(_("Unable to create raster map <%s>"), output_names[map_index]);
    } // end for map_index


    /* open up the data and geography files  */
    sprintf(file_to_open,"%s.txt",data_input_char);
    fd_data = fopen(file_to_open, "r");

    if (fd_data == NULL)
      G_fatal_error(_("Unable to open input file <%s>"),file_to_open);

    sprintf(file_to_open,"%s.txt",geog_input_char);
    fd_geog = fopen(file_to_open, "r");

    if (fd_geog == NULL)
      G_fatal_error(_("Unable to open input file <%s>"),file_to_open);

    // initialize...
    row_currently_restoring = 0;
    col_currently_restoring = 0;

    for (data_row = 0; data_row < n_to_restore; data_row++) {
      G_percent(data_row, n_to_restore, 3);
      /* pull out the geographic row/col to restore, skip over the lat/long */

      *junk = '\0'; // clear out the junk holders
      *junk_line= '\0';

      // grab the first line
      fgets(junk_line, chars_to_read, fd_geog);
      sscanf(junk_line, "%d %d %s", &row_to_restore, &col_to_restore, junk);

      /* check if we're all good or not */
      while ( row_to_restore > row_currently_restoring )
      {
        // we need to null out the rest of this row, store it, and move on...
        for (map_index = 0; map_index < nmaps ; map_index++) {
          switch (rtype) {
            case CELL_TYPE:
                G_put_c_raster_row(cf[map_index], cell[map_index]);
                G_set_c_null_value( cell[map_index], ncols); // start out with all nulls
            break;
            case FCELL_TYPE:
                G_put_f_raster_row(cf[map_index], fcell[map_index]);
                G_set_f_null_value(fcell[map_index], ncols); // start out with all nulls
            break;
            case DCELL_TYPE:
                G_put_d_raster_row(cf[map_index], dcell[map_index]);
                G_set_d_null_value(dcell[map_index], ncols); // start out with all nulls
            break;
          } // end of switch 
        } // end for map_index for clearing out...
          row_currently_restoring++;
      } // end if row_to_restore > row_currently_restoring

      for (map_index = 0; map_index < nmaps ; map_index++) {

        /* pull out the data a bit at a time */

        if (fscanf(fd_data, "%lf", &x) != 1) {
          G_unopen_cell(cf[map_index]);
          G_fatal_error(_("Data conversion failed at data row %d, col %d"),
            data_row + 1, data_col + 1);
        }

//printf("rtr=[%d]; ctr=[%d]; map=[%d]; num=[%g]\n",row_to_restore, col_to_restore,map_index,x); fflush(stdout);

        switch (rtype) {
        case CELL_TYPE:
          cell[map_index][col_to_restore] = (CELL) x;
          break;
        case FCELL_TYPE:
          fcell[map_index][col_to_restore] = (FCELL) x;
          break;
        case DCELL_TYPE:
          dcell[map_index][col_to_restore] = (DCELL) x;
          break;
        } // end of switch 1
      } // end of map_index
    } // end of data_rows

    // store the last bit and close out
    for (map_index = 0; map_index < nmaps ; map_index++) {
      switch (rtype) {
      case CELL_TYPE:
          G_put_c_raster_row(cf[map_index], cell[map_index]);
          break;
      case FCELL_TYPE:
          G_put_f_raster_row(cf[map_index], fcell[map_index]);
          break;
      case DCELL_TYPE:
          G_put_d_raster_row(cf[map_index], dcell[map_index]);
          break;
      } // end of switch 2
      row_currently_restoring++;
    } // end for map_index (close out)

    // make sure we've filled out the region...
    while ( row_currently_restoring <= nrows )
    {
      // we need to null out the rest of this row, store it, and move on...
      for (map_index = 0; map_index < nmaps ; map_index++) {
      switch (rtype) {
        case CELL_TYPE:
          G_put_c_raster_row(cf[map_index], cell[map_index]);
          G_set_c_null_value( cell[map_index], ncols); // start out with all nulls
          break;
        case FCELL_TYPE:
          G_put_f_raster_row(cf[map_index], fcell[map_index]);
          G_set_f_null_value(fcell[map_index], ncols); // start out with all nulls
          break;
        case DCELL_TYPE:
          G_put_d_raster_row(cf[map_index], dcell[map_index]);
          G_set_d_null_value(dcell[map_index], ncols); // start out with all nulls
          break;
        } // end of switch 
      } // end for map_index for clearing out...
      row_currently_restoring++;
    } // end if row_to_restore > row_currently_restoring

    for (map_index = 0; map_index < nmaps ; map_index++) {
      /* G_message(_("CREATING SUPPORT FILES FOR %s"), output); */
      G_close_cell(cf[map_index]);

      if (title)
        G_put_cell_title(output_names[map_index], title);

      G_short_history(output_names[map_index], "raster", &history);
      G_command_history(&history);
      G_write_history(output_names[map_index], &history);
    } // end for map_index (close out)

    exit(EXIT_SUCCESS);
}

