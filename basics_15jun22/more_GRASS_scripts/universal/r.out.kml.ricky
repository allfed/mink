#!/bin/bash
############################################################################
#
# MODULE:       r.out.kml
# AUTHOR(S):    David Finlayson, 2008
#               david.p.finlayson@gmail.com
#
# PURPOSE:	    Create a skeleton kml file from a raster map.
#
# COPYRIGHT:	(C) 2008 by the GRASS Development Team
#
#		This program is free software under the GNU General Public
#		License (>=v2). Read the file COPYING that comes with GRASS
#		for details.
#
#############################################################################
#
# January 2008 - First version of the script posted to GRASS

#%Module
#%  description: creates a kml file from a GRASS raster
#%End
#%flag
#%  key: l
#%  description: add legend icon to kml
#%end
#%option
#% key: input
#% type: string
#% gisprompt: old,cell,raster
#% description: Name of input raster
#% required : yes
#%end
#%option
#% key: output
#% type: string
#% description: Name of output kml file
#% required : yes
#%end
#%option
#% key: title
#% type: string
#% description: Title associated with the raster
#% required : no
#%end
#%option
#% key: description
#% type: string
#% description: A more detailed description associated with the raster
#% required : no
#%end
#%option
#% key: snippet
#% type: string
#% description: A snippet associated with the raster
#% required : no
#%end

# Constants (hard to guess what will work best)
LEGEND_WIDTH=500
LEGEND_HEIGHT=500
#LEGEND_TEXT_COLOR=white
LEGEND_TEXT_COLOR=black
BACKGROUND_COLOR=white

# tell it we actually want truecolor, etc...
export GRASS_PNG_COMPRESSION=9
export GRASS_TRUECOLOR=TRUE

# Check that we are in GRASS
if [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

# Run g.parser
if [ "$1" != "@ARGS_PARSED@" ] ; then
  PARSER=`which g.parser`
  exec $PARSER "$0" "$@"
fi

# Check that this is a geographic projection (required by Google Earth)
PROJECTION=`g.proj -p | grep "name" | sed "s/\ //g" | cut -c6-`
if [ "$PROJECTION" != "Latitude-Longitude" ] ; then
    echo "r.out.kml: error: export only works from a Latitude-Longitude location"
    exit 1
fi

# Check that this is a WGS84 datum
DATUM=`g.proj -d | grep "datum code: wgs84" | cut -d: -f2`
if [ "$DATUM" != " wgs84" ] ; then
    echo "r.out.kml: error: export only works from a WGS84 datum location"
    exit 1
fi


# draw the raster
if [ -n "$GIS_OPT_INPUT" ] ; then
    r.out.png input=$GIS_OPT_INPUT output=${GIS_OPT_OUTPUT}.png 
fi 

# draw the legend (if requested)
if [ $GIS_FLAG_L -eq 1 ] ; then
    export GRASS_WIDTH=$LEGEND_WIDTH
    export GRASS_HEIGHT=$LEGEND_HEIGHT
    export GRASS_PNGFILE=${GIS_OPT_OUTPUT}_legend.png
    d.mon start=PNG
    d.mon select=PNG
    d.legend -s map=$GIS_OPT_INPUT color=$LEGEND_TEXT_COLOR
    d.mon stop=PNG
fi

# Create the kml file
TITLE=`r.info -m $GIS_OPT_INPUT | cut -d= -f2`
NORTH=`g.region -g | grep -m1 "n=" | cut -d= -f2`
SOUTH=`g.region -g | grep -m1 "s=" | cut -d= -f2`
EAST=`g.region -g | grep -m1 "e=" | cut -d= -f2`
WEST=`g.region -g | grep -m1 "w=" | cut -d= -f2`

echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > ${GIS_OPT_OUTPUT}.kml
echo "<kml xmlns=\"http://earth.google.com/kml/2.2\">" >> ${GIS_OPT_OUTPUT}.kml
echo "<Folder>" >> ${GIS_OPT_OUTPUT}.kml
if [ -n "$GIS_OPT_TITLE" ]; then
  echo "<name>$GIS_OPT_TITLE</name>" >> ${GIS_OPT_OUTPUT}.kml
else
  echo "<name>$TITLE</name>" >> ${GIS_OPT_OUTPUT}.kml
fi
if [ -n "$GIS_OPT_SNIPPET" ]; then
  echo "<Snippet>$GIS_OPT_SNIPPET</Snippet>" >> ${GIS_OPT_OUTPUT}.kml
fi
if [ -n "$GIS_OPT_DESCRIPTION" ]; then
  echo "<description>$GIS_OPT_DESCRIPTION</description>" >> ${GIS_OPT_OUTPUT}.kml
fi
echo "<GroundOverlay>" >> ${GIS_OPT_OUTPUT}.kml
if [ -n "$GIS_OPT_TITLE" ]; then
  echo "<name>$GIS_OPT_TITLE</name>" >> ${GIS_OPT_OUTPUT}.kml
else
  echo "<name>$TITLE</name>" >> ${GIS_OPT_OUTPUT}.kml
fi
#echo "<name>$TITLE</name>" >> ${GIS_OPT_OUTPUT}.kml
if [ -n "$GIS_OPT_SNIPPET" ]; then
  echo "<Snippet>$GIS_OPT_SNIPPET</Snippet>" >> ${GIS_OPT_OUTPUT}.kml
fi
if [ -n "$GIS_OPT_DESCRIPTION" ]; then
  echo "<description>$GIS_OPT_DESCRIPTION</description>" >> ${GIS_OPT_OUTPUT}.kml
fi
#echo "<description>Enter Description Here</description>" >> ${GIS_OPT_OUTPUT}.kml
echo "<Icon>" >> ${GIS_OPT_OUTPUT}.kml
# drop any directory names...
image_name=${GIS_OPT_OUTPUT##*/}
#echo "<href>${GIS_OPT_OUTPUT}.png</href>" >> ${GIS_OPT_OUTPUT}.kml
echo "<href>${image_name}.png</href>" >> ${GIS_OPT_OUTPUT}.kml
echo "</Icon>" >> ${GIS_OPT_OUTPUT}.kml
echo "<LatLonBox>" >> ${GIS_OPT_OUTPUT}.kml
echo "<north>$NORTH</north>" >> ${GIS_OPT_OUTPUT}.kml
echo "<south>$SOUTH</south>" >> ${GIS_OPT_OUTPUT}.kml
echo "<east>$EAST</east>" >> ${GIS_OPT_OUTPUT}.kml
echo "<west>$WEST</west>" >> ${GIS_OPT_OUTPUT}.kml
echo "<rotation>0.0</rotation>" >> ${GIS_OPT_OUTPUT}.kml
echo "</LatLonBox>"  >> ${GIS_OPT_OUTPUT}.kml
echo "</GroundOverlay>"  >> ${GIS_OPT_OUTPUT}.kml

# add a legend if requested
# this didn't work originally (i think) so i am hacking it a bit...
if [ $GIS_FLAG_L -eq 1 ] ; then
    echo "<ScreenOverlay>"  >> ${GIS_OPT_OUTPUT}.kml
    echo "<name>Legend</name>" >> ${GIS_OPT_OUTPUT}.kml
    echo "<Icon>"  >> ${GIS_OPT_OUTPUT}.kml
    echo "<href>${image_name}_legend.png</href>"  >> ${GIS_OPT_OUTPUT}.kml
#    echo "<href>${GIS_OPT_OUTPUT}_legend.png</href>"  >> ${GIS_OPT_OUTPUT}.kml
    echo "</Icon>"  >> ${GIS_OPT_OUTPUT}.kml
    echo "<overlayXY x=\"0\" y=\"1\" xunits=\"fraction\" yunits=\"fraction\"/>"  >> ${GIS_OPT_OUTPUT}.kml
#    echo "<screenXY x=\"0.05\" y=\"0.95\" xunits=\"fraction\" yunits=\"fraction\"/>"  >> ${GIS_OPT_OUTPUT}.kml
    echo "<screenXY x=\"5\" y=\"5\" xunits=\"pixels\" yunits=\"insetPixels\"/>"  >> ${GIS_OPT_OUTPUT}.kml
    echo "<rotationXY x=\"0\" y=\"0\" xunits=\"fraction\" yunits=\"fraction\"/>"  >> ${GIS_OPT_OUTPUT}.kml
    echo "<size x=\"0\" y=\"0\" xunits=\"fraction\" yunits=\"fraction\"/>"  >> ${GIS_OPT_OUTPUT}.kml
    echo "</ScreenOverlay>"  >> ${GIS_OPT_OUTPUT}.kml
fi

echo "</Folder>"  >> ${GIS_OPT_OUTPUT}.kml
echo "</kml>"  >> ${GIS_OPT_OUTPUT}.kml


# Trim the image to the grid (fix png output to avoid this)
mogrify -transparent $BACKGROUND_COLOR ${GIS_OPT_OUTPUT}.png
if [ $GIS_FLAG_L -eq 1 ] ; then
    mogrify -trim ${GIS_OPT_OUTPUT}_legend.png
fi


